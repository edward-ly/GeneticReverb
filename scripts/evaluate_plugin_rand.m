% Record fitness values of impulse responses generated by the plugin.
%
% File: evaluate_plugin.m
% Author: Edward Ly (m5222120@u-aizu.ac.jp)
% Version: 0.5.0
% Last Updated: 10 March 2020
%
%
% BSD 3-Clause License
%
% Copyright (c) 2019, Edward Ly
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
% 1. Redistributions of source code must retain the above copyright notice, this
%    list of conditions and the following disclaimer.
%
% 2. Redistributions in binary form must reproduce the above copyright notice,
%    this list of conditions and the following disclaimer in the documentation
%    and/or other materials provided with the distribution.
%
% 3. Neither the name of the copyright holder nor the names of its
%    contributors may be used to endorse or promote products derived from
%    this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
% FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
% DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
% OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

%% Preamble
% Clear workspace and figures
clear; close all;

% Add paths to any external functions used
addpath ../components

%% Output Parameters
NUM_IRS = 250;                  % Number of IRs to generate per iteration
VERBOSE = false;                % Display genetic algorithm status messages
T60s = [0.625, 1.25, 2.5, 5.0]; % List of T60 values to test

%% Genetic Algorithm Parameters
% Settings should be the same as in plugin

gaParamsHigh = struct( ...
    'POPULATION_SIZE', 20, ...
    'SELECTION_SIZE', 8, ...
    'NUM_GENERATIONS', 20, ...
    'PLATEAU_LENGTH', 5, ...
    'FITNESS_THRESHOLD', 0.1, ...
    'MUTATION_RATE', 0.001);

gaParamsMed = struct( ...
    'POPULATION_SIZE', 20, ...
    'SELECTION_SIZE', 8, ...
    'NUM_GENERATIONS', 10, ...
    'PLATEAU_LENGTH', 3, ...
    'FITNESS_THRESHOLD', 0.1, ...
    'MUTATION_RATE', 0.001);

gaParamsLow = struct( ...
    'POPULATION_SIZE', 10, ...
    'SELECTION_SIZE', 4, ...
    'NUM_GENERATIONS', 10, ...
    'PLATEAU_LENGTH', 3, ...
    'FITNESS_THRESHOLD', 0.1, ...
    'MUTATION_RATE', 0.001);

%% Open new file to write results
timestamp = datestr(now, 'yyyymmdd_HHMMSSFFF');
outFileName = ['results_' timestamp '.txt'];
diary(outFileName)
fprintf('Test Date/Time = %s\n', timestamp);
fprintf('Group Size = %d\n\n', NUM_IRS);

%% Generate and Evaluate New Impulse Responses
% Initial Settings
[times, fitnesses, losses, conditions] = ir_test_init(gaParamsLow, 1, NUM_IRS);
print_stats(NUM_IRS, times, fitnesses, losses, conditions, 'Initial');

% Low Settings, T60 = 0.625s
[timesLow1, fitnessesLow1, lossesLow1, conditionsLow1] = ir_test_rand(gaParamsLow, T60s(1), NUM_IRS);
print_stats(NUM_IRS, timesLow1, fitnessesLow1, lossesLow1, conditionsLow1, 'Low', T60s(1));

% Low Settings, T60 = 1.25s
[timesLow2, fitnessesLow2, lossesLow2, conditionsLow2] = ir_test_rand(gaParamsLow, T60s(2), NUM_IRS);
print_stats(NUM_IRS, timesLow2, fitnessesLow2, lossesLow2, conditionsLow2, 'Low', T60s(2));

% Low Settings, T60 = 2.5s
[timesLow3, fitnessesLow3, lossesLow3, conditionsLow3] = ir_test_rand(gaParamsLow, T60s(3), NUM_IRS);
print_stats(NUM_IRS, timesLow3, fitnessesLow3, lossesLow3, conditionsLow3, 'Low', T60s(3));

% Low Settings, T60 = 5s
[timesLow4, fitnessesLow4, lossesLow4, conditionsLow4] = ir_test_rand(gaParamsLow, T60s(4), NUM_IRS);
print_stats(NUM_IRS, timesLow4, fitnessesLow4, lossesLow4, conditionsLow4, 'Low', T60s(4));

% Medium Settings, T60 = 0.625s
[timesMed1, fitnessesMed1, lossesMed1, conditionsMed1] = ir_test_rand(gaParamsMed, T60s(1), NUM_IRS);
print_stats(NUM_IRS, timesMed1, fitnessesMed1, lossesMed1, conditionsMed1, 'Medium', T60s(1));

% Medium Settings, T60 = 1.25s
[timesMed2, fitnessesMed2, lossesMed2, conditionsMed2] = ir_test_rand(gaParamsMed, T60s(2), NUM_IRS);
print_stats(NUM_IRS, timesMed2, fitnessesMed2, lossesMed2, conditionsMed2, 'Medium', T60s(2));

% Medium Settings, T60 = 2.5s
[timesMed3, fitnessesMed3, lossesMed3, conditionsMed3] = ir_test_rand(gaParamsMed, T60s(3), NUM_IRS);
print_stats(NUM_IRS, timesMed3, fitnessesMed3, lossesMed3, conditionsMed3, 'Medium', T60s(3));

% Medium Settings, T60 = 5s
[timesMed4, fitnessesMed4, lossesMed4, conditionsMed4] = ir_test_rand(gaParamsMed, T60s(4), NUM_IRS);
print_stats(NUM_IRS, timesMed4, fitnessesMed4, lossesMed4, conditionsMed4, 'Medium', T60s(4));

% High Settings, T60 = 0.625s
[timesHigh1, fitnessesHigh1, lossesHigh1, conditionsHigh1] = ir_test_rand(gaParamsHigh, T60s(1), NUM_IRS);
print_stats(NUM_IRS, timesHigh1, fitnessesHigh1, lossesHigh1, conditionsHigh1, 'High', T60s(1));

% High Settings, T60 = 1.25s
[timesHigh2, fitnessesHigh2, lossesHigh2, conditionsHigh2] = ir_test_rand(gaParamsHigh, T60s(2), NUM_IRS);
print_stats(NUM_IRS, timesHigh2, fitnessesHigh2, lossesHigh2, conditionsHigh2, 'High', T60s(2));

% High Settings, T60 = 2.5s
[timesHigh3, fitnessesHigh3, lossesHigh3, conditionsHigh3] = ir_test_rand(gaParamsHigh, T60s(3), NUM_IRS);
print_stats(NUM_IRS, timesHigh3, fitnessesHigh3, lossesHigh3, conditionsHigh3, 'High', T60s(3));

% High Settings, T60 = 5s
[timesHigh4, fitnessesHigh4, lossesHigh4, conditionsHigh4] = ir_test_rand(gaParamsHigh, T60s(4), NUM_IRS);
print_stats(NUM_IRS, timesHigh4, fitnessesHigh4, lossesHigh4, conditionsHigh4, 'High', T60s(4));

%% Close Log File
diary off
