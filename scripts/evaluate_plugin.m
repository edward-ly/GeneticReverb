% Record fitness values of impulse responses generated by the plugin.
%
% File: evaluate_plugin.m
% Author: Edward Ly (m5222120@u-aizu.ac.jp)
% Version: 0.1.1
% Last Updated: 14 November 2019
%
%
% BSD 3-Clause License
%
% Copyright (c) 2019, Edward Ly
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
% 1. Redistributions of source code must retain the above copyright notice, this
%    list of conditions and the following disclaimer.
%
% 2. Redistributions in binary form must reproduce the above copyright notice,
%    this list of conditions and the following disclaimer in the documentation
%    and/or other materials provided with the distribution.
%
% 3. Neither the name of the copyright holder nor the names of its
%    contributors may be used to endorse or promote products derived from
%    this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
% FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
% DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
% OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

%% Preamble
% Clear workspace and figures
clear; close all;

% Add paths to any external functions used
addpath ../components

%% Output Parameters
NUM_IRS = 100;                 % Number of impulse responses to generate per iteration
VERBOSE = false;               % Display genetic algorithm status messages
T60s = [0.625, 1.25, 2.5 5.0]; % List of T60 values to test

%% Genetic Algorithm Parameters
% Settings are the same as in plugin

gaParamsHigh = struct( ...
    'POPULATION_SIZE', 50, ...
    'SELECTION_SIZE', 20, ...
    'NUM_GENERATIONS', 10, ...
    'STOP_GENERATIONS', 5, ...
    'FITNESS_THRESHOLD', 1e-3, ...
    'MUTATION_RATE', 0.001);

gaParamsMedium = struct( ...
    'POPULATION_SIZE', 50, ...
    'SELECTION_SIZE', 20, ...
    'NUM_GENERATIONS', 5, ...
    'STOP_GENERATIONS', 2, ...
    'FITNESS_THRESHOLD', 1e-3, ...
    'MUTATION_RATE', 0.001);

gaParamsLow = struct( ...
    'POPULATION_SIZE', 20, ...
    'SELECTION_SIZE', 8, ...
    'NUM_GENERATIONS', 5, ...
    'STOP_GENERATIONS', 2, ...
    'FITNESS_THRESHOLD', 1e-2, ...
    'MUTATION_RATE', 0.001);

%% Open new file to write results
timestamp = datestr(now, 'yyyymmdd_HHMMSSFFF');
fileID = fopen(['results_' timestamp '.txt'], 'w');
fprintf(fileID, 'Test Date/Time = %s\n', timestamp);
fprintf(fileID, 'Group Size = %d\n\n', NUM_IRS);

%% Generate and Evaluate New Impulse Responses (Low Settings)
for i = 1:length(T60s)
    [times, fitnesses, losses] = ir_test(gaParamsLow, T60s(i), NUM_IRS);

    % Show Data Statistics
    fprintf('Summary (Low Settings, T60 = %fs):\n', T60s(i));
    fprintf('Run Time: min = %f, max = %f, mean = %f, std = %f\n', min(times), max(times), mean(times), std(times));
    fprintf('Fitness: min = %f, max = %f, mean = %f, std = %f\n', min(fitnesses), max(fitnesses), mean(fitnesses), std(fitnesses));
    fprintf('T60 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.T60]), max([losses.T60]), mean([losses.T60]), std([losses.T60]));
    fprintf('EDT Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.EDT]), max([losses.EDT]), mean([losses.EDT]), std([losses.EDT]));
    fprintf('ITDG Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.ITDG]), max([losses.ITDG]), mean([losses.ITDG]), std([losses.ITDG]));
    fprintf('C80 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.C80]), max([losses.C80]), mean([losses.C80]), std([losses.C80]));
    fprintf('BR Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.BR]), max([losses.BR]), mean([losses.BR]), std([losses.BR]));

    % Write Data to File
    fprintf(fileID, 'Summary (Low Settings, T60 = %fs):\n', T60s(i));
    fprintf(fileID, 'Run Time: min = %f, max = %f, mean = %f, std = %f\n', min(times), max(times), mean(times), std(times));
    fprintf(fileID, 'Fitness: min = %f, max = %f, mean = %f, std = %f\n', min(fitnesses), max(fitnesses), mean(fitnesses), std(fitnesses));
    fprintf(fileID, 'T60 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.T60]), max([losses.T60]), mean([losses.T60]), std([losses.T60]));
    fprintf(fileID, 'EDT Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.EDT]), max([losses.EDT]), mean([losses.EDT]), std([losses.EDT]));
    fprintf(fileID, 'ITDG Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.ITDG]), max([losses.ITDG]), mean([losses.ITDG]), std([losses.ITDG]));
    fprintf(fileID, 'C80 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.C80]), max([losses.C80]), mean([losses.C80]), std([losses.C80]));
    fprintf(fileID, 'BR Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.BR]), max([losses.BR]), mean([losses.BR]), std([losses.BR]));
    fprintf(fileID, '\n');
end

%% Generate and Evaluate New Impulse Responses (Medium Settings)
for i = 1:length(T60s)
    [times, fitnesses, losses] = ir_test(gaParamsMedium, T60s(i), NUM_IRS);

    % Show Data Statistics
    fprintf('Summary (Medium Settings, T60 = %fs):\n', T60s(i));
    fprintf('Run Time: min = %f, max = %f, mean = %f, std = %f\n', min(times), max(times), mean(times), std(times));
    fprintf('Fitness: min = %f, max = %f, mean = %f, std = %f\n', min(fitnesses), max(fitnesses), mean(fitnesses), std(fitnesses));
    fprintf('T60 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.T60]), max([losses.T60]), mean([losses.T60]), std([losses.T60]));
    fprintf('EDT Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.EDT]), max([losses.EDT]), mean([losses.EDT]), std([losses.EDT]));
    fprintf('ITDG Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.ITDG]), max([losses.ITDG]), mean([losses.ITDG]), std([losses.ITDG]));
    fprintf('C80 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.C80]), max([losses.C80]), mean([losses.C80]), std([losses.C80]));
    fprintf('BR Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.BR]), max([losses.BR]), mean([losses.BR]), std([losses.BR]));

    % Write Data to File
    fprintf(fileID, 'Summary (Medium Settings, T60 = %fs):\n', T60s(i));
    fprintf(fileID, 'Run Time: min = %f, max = %f, mean = %f, std = %f\n', min(times), max(times), mean(times), std(times));
    fprintf(fileID, 'Fitness: min = %f, max = %f, mean = %f, std = %f\n', min(fitnesses), max(fitnesses), mean(fitnesses), std(fitnesses));
    fprintf(fileID, 'T60 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.T60]), max([losses.T60]), mean([losses.T60]), std([losses.T60]));
    fprintf(fileID, 'EDT Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.EDT]), max([losses.EDT]), mean([losses.EDT]), std([losses.EDT]));
    fprintf(fileID, 'ITDG Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.ITDG]), max([losses.ITDG]), mean([losses.ITDG]), std([losses.ITDG]));
    fprintf(fileID, 'C80 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.C80]), max([losses.C80]), mean([losses.C80]), std([losses.C80]));
    fprintf(fileID, 'BR Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.BR]), max([losses.BR]), mean([losses.BR]), std([losses.BR]));
    fprintf(fileID, '\n');
end

%% Generate and Evaluate New Impulse Responses (High Settings)
for i = 1:length(T60s)
    [times, fitnesses, losses] = ir_test(gaParamsHigh, T60s(i), NUM_IRS);

    % Show Data Statistics
    fprintf('Summary (High Settings, T60 = %fs):\n', T60s(i));
    fprintf('Run Time: min = %f, max = %f, mean = %f, std = %f\n', min(times), max(times), mean(times), std(times));
    fprintf('Fitness: min = %f, max = %f, mean = %f, std = %f\n', min(fitnesses), max(fitnesses), mean(fitnesses), std(fitnesses));
    fprintf('T60 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.T60]), max([losses.T60]), mean([losses.T60]), std([losses.T60]));
    fprintf('EDT Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.EDT]), max([losses.EDT]), mean([losses.EDT]), std([losses.EDT]));
    fprintf('ITDG Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.ITDG]), max([losses.ITDG]), mean([losses.ITDG]), std([losses.ITDG]));
    fprintf('C80 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.C80]), max([losses.C80]), mean([losses.C80]), std([losses.C80]));
    fprintf('BR Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.BR]), max([losses.BR]), mean([losses.BR]), std([losses.BR]));

    % Write Data to File
    fprintf(fileID, 'Summary (High Settings, T60 = %fs):\n', T60s(i));
    fprintf(fileID, 'Run Time: min = %f, max = %f, mean = %f, std = %f\n', min(times), max(times), mean(times), std(times));
    fprintf(fileID, 'Fitness: min = %f, max = %f, mean = %f, std = %f\n', min(fitnesses), max(fitnesses), mean(fitnesses), std(fitnesses));
    fprintf(fileID, 'T60 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.T60]), max([losses.T60]), mean([losses.T60]), std([losses.T60]));
    fprintf(fileID, 'EDT Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.EDT]), max([losses.EDT]), mean([losses.EDT]), std([losses.EDT]));
    fprintf(fileID, 'ITDG Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.ITDG]), max([losses.ITDG]), mean([losses.ITDG]), std([losses.ITDG]));
    fprintf(fileID, 'C80 Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.C80]), max([losses.C80]), mean([losses.C80]), std([losses.C80]));
    fprintf(fileID, 'BR Error: min = %f, max = %f, mean = %f, std = %f\n', min([losses.BR]), max([losses.BR]), mean([losses.BR]), std([losses.BR]));
    fprintf(fileID, '\n');
end

%% Close File
fclose(fileID);
